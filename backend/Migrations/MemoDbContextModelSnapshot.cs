// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(MemoDbContext))]
    partial class MemoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("backend.Models.GuestMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RelationToCouple")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("WeddingId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WeddingId");

                    b.ToTable("GuestMessages");
                });

            modelBuilder.Entity("backend.Models.HowWeMet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("WeddingStoryId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WeddingStoryId");

                    b.ToTable("HowWeMetStories");
                });

            modelBuilder.Entity("backend.Models.HowWeMetMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("HowWeMetId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HowWeMetId");

                    b.ToTable("HowWeMetMedias");
                });

            modelBuilder.Entity("backend.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsCoverImage")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("WeddingId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WeddingId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("backend.Models.Planner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Planners");
                });

            modelBuilder.Entity("backend.Models.PlannerProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlannerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PlannerId");

                    b.HasIndex("UserId");

                    b.ToTable("PlannerProfiles");
                });

            modelBuilder.Entity("backend.Models.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("WeddingStoryId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WeddingStoryId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("backend.Models.ProposalMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.ToTable("ProposalMedias");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Models.WQRCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AssetUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Scans")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("WeddingId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WeddingId")
                        .IsUnique();

                    b.ToTable("QRCodes");
                });

            modelBuilder.Entity("backend.Models.WeddingStory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BrideName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BrideVows")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GroomName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GroomVows")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PlannerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Proposal")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TemplateChoice")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ThankYouMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ThemePreference")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WeddingDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WeddingLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PlannerId");

                    b.ToTable("Weddings");
                });

            modelBuilder.Entity("backend.Models.GuestMessage", b =>
                {
                    b.HasOne("backend.Models.WeddingStory", "Wedding")
                        .WithMany("GuestMessages")
                        .HasForeignKey("WeddingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wedding");
                });

            modelBuilder.Entity("backend.Models.HowWeMet", b =>
                {
                    b.HasOne("backend.Models.WeddingStory", "WeddingStory")
                        .WithMany("HowWeMetStories")
                        .HasForeignKey("WeddingStoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeddingStory");
                });

            modelBuilder.Entity("backend.Models.HowWeMetMedia", b =>
                {
                    b.HasOne("backend.Models.HowWeMet", "HowWeMet")
                        .WithMany("Media")
                        .HasForeignKey("HowWeMetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HowWeMet");
                });

            modelBuilder.Entity("backend.Models.Media", b =>
                {
                    b.HasOne("backend.Models.WeddingStory", "Wedding")
                        .WithMany("Gallery")
                        .HasForeignKey("WeddingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wedding");
                });

            modelBuilder.Entity("backend.Models.PlannerProfile", b =>
                {
                    b.HasOne("backend.Models.Planner", "Planner")
                        .WithMany("PlannerProfiles")
                        .HasForeignKey("PlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Planners")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Proposal", b =>
                {
                    b.HasOne("backend.Models.WeddingStory", "WeddingStory")
                        .WithMany("Proposals")
                        .HasForeignKey("WeddingStoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeddingStory");
                });

            modelBuilder.Entity("backend.Models.ProposalMedia", b =>
                {
                    b.HasOne("backend.Models.Proposal", "Proposal")
                        .WithMany("Media")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("backend.Models.WQRCode", b =>
                {
                    b.HasOne("backend.Models.WeddingStory", "Wedding")
                        .WithOne("QRCode")
                        .HasForeignKey("backend.Models.WQRCode", "WeddingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wedding");
                });

            modelBuilder.Entity("backend.Models.WeddingStory", b =>
                {
                    b.HasOne("backend.Models.Planner", "Planner")
                        .WithMany("Weddings")
                        .HasForeignKey("PlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planner");
                });

            modelBuilder.Entity("backend.Models.HowWeMet", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("backend.Models.Planner", b =>
                {
                    b.Navigation("PlannerProfiles");

                    b.Navigation("Weddings");
                });

            modelBuilder.Entity("backend.Models.Proposal", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Planners");
                });

            modelBuilder.Entity("backend.Models.WeddingStory", b =>
                {
                    b.Navigation("Gallery");

                    b.Navigation("GuestMessages");

                    b.Navigation("HowWeMetStories");

                    b.Navigation("Proposals");

                    b.Navigation("QRCode")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
